---
title: "6. Wie lassen sich die Ergebnisse einer Mehrebenregression berichten?"
---

```{r setup, include=FALSE}
# Figure size in inches
w = 5
h = 2.5
s = 2.8
    
knitr::opts_chunk$set(eval=TRUE, echo = TRUE, message = FALSE, warning = FALSE,
                      fig.width=w, fig.height=h, fig.align='center')
save <-  T
save_fig <- function(filename, save = TRUE){
  if(save==TRUE){
    ggsave(paste0("./Grafiken/", filename), 
         width = w, height = h,
         #scale = s,       
         unit = "in")
  }
  else{
    message("Saving skipped...")
  }
}

options(scipen=999, digits=3)
```

```{css, eval=F, echo=F}
/* CSS Stil für Formeln unter Scatterplots */
P.math {
    text-align: center;
    font-size: 2vw;
}

P.math_left {
    text-align: left;
    font-size: 1.5vw;
}


DIV.border {
    padding:9.5px;
    border-radius:4px;
    border:1px solid #cccccc;
    margin-top: 10px;
    margin-bottom:10px;
}
```

# Themenüberblick

In diesem Teil sechs beschäftigen wir uns mit der Frage: Wie lassen sich die Ergebnisse einer Mehrebenregression berichten?

In den vergangenen Teilen [4](mreg4.qmd) und [5](mreg5.qmd) haben wir nacheinander verschiedene Varianten des Mehrebenenmodells geschätzt und interpretiert. Mithilfe der Anova haben wir geprüft, ob die aufeinander aufbauenden Modelle jeweils besser an die Daten angepast ist.

In diesem Teil wird es darum gehen, wie man die Ergebnisse dieser Modelle berichtet und wie man die relevanten Quantites of Interest grafisch aufbereitet.

Die konkreten Lernziele sind, dass Sie mit R in der Lage sind...

-   die Regressionsergebnisse tabellarisch gegenüberzustellen.
-   die fixed Effects als Forrestplot grafisch darzustellen.
-   die variierenden Intercepts und variierende Slopes grafisch darzustellen.
-   Cross-Level Interaktionen mit Effekt-Plots grafisch darzustellen.

Dazu wechseln wir nun zu R.

# Vorbereitung der Daten und Modelle

Wie auch schon zuvor, müssen wir das komplette RScript aus dem vorigen Teil 5 mit der `source()`-Funktion ausühren, um die Daten zu laden (`RScript_mreg5.R` bei den [Ressourcen](ressourcen.qmd)).

```{r}
source("./Ressourcen/RScript_mreg5.R") #Pfad zur Datei ggf. anpassen
```

# Tabellen zu den Regressionsmodellen

Um die Ergebnisse der Regressionen tabellarisch aufzubereiten, nutzen wir das [`texreg`](https://cran.r-project.org/web/packages/texreg/vignettes/texreg.pdf)-Paket.

Das Paket enthält mehrere Funktionen, um die Ergebnisse unterschiedlicher Regressionsmodelle automatisch aufzubereiten und als Tabelle auszugeben.

Dabei unterscheiden sich die Funktionen, je nach dem, in welchem Format die Tabellen formatiert werden sollen:

-   `screenreg()` gibt die Tabelle auf dem Bildschirm in der RConsole aus.

```{r}
library(texreg)
screenreg(list(mreg3,mreg4))
```

-   `wordreg()` erstellt die Tabelle in einem Microsoft Word Format. Dafür muss nur die Zieldatei als `file`-Argument angegeben werden.

```{r, eval=F}
wordreg(list(mreg3,mreg4),
        file = "./Docs/tabelle.doc")
```

Aber der Königsweg ist natürlich, die Tabellen über RMarkdown direkt in html- oder Latex-Dokumenten erstellen zu lassen.

-   `htmlreg()` erstellt die Tabelle im html-Format.
-   `texreg()` gibt die Tabelle im Latex Format aus.

Auch dieses Dokument wurde mit RMarkdown erstellt, wir können hier also die Tabellenausgabe des Aufrufs `htmlreg()` sehen:

```{r, results='asis'}
htmlreg(list(mreg3,mreg4))
```

Damit Sie auch den passenden Markdown Code-Chunk sehen, probieren wir das kurz aus...

Dieses Code-Snippet kopiere ich in ein RMarkdown-Dokument, das ich dann als html oder als pdf-Datei knitten kann. Wichtig ist, das das Code-Chunk Argument `results='asis'` angegeben wird.

```{r, eval=F}
#```{r, results='asis'}
source("./RScript_mreg5.R")
library(texreg)
htmlreg(list(mreg3,mreg4))
texreg(list(mreg3,mreg4))
#```
```

Abgesehen vom `texreg`-Paket kann man altrenativ die `tab_model()`-Funktion aus dem [`sjPlot`](https://strengejacke.github.io/sjPlot/)-Paket nutzen. Auch diese Funktion erstellt für unterschiedlichste Regressionsmodelle die passenden Tabellen. Zudem lassen sich die Tabellen sehr kleinteilig den eigenen Bedürfnissen anpassen.

Hilfe und Erläuterungen gibt es auch in der Vignette zum Paket: https://strengejacke.github.io/sjPlot/articles/tab_mixed.html

```{r}
library(sjPlot)
#?tab_model
# Gibt Tabelle im RStudio Viewer aus
tab_model(mreg0, mreg3,mreg4, 
          p.style = "stars",
          use.viewer = T)
```

Oder man kann die Tabelle in einer Datei speichern:

```{r}
tab_model(mreg0, mreg3, mreg4, 
          p.style = "stars",
          use.viewer = F,
          file = "./Docs/tabelle.html")
```

# Grafische Darstellung der Ergebnisse

Das Schweizer Taschenmesser der grafischen Darstellung von Regressionsergebnissen ist das schon genannte Paket [`sjPlot`](https://strengejacke.github.io/sjPlot/).

Die Darstellung der fixed Effects erfolgt wie bei ganz gewöhnlichen Regressionsmodellen. Um die fixed Effects grafisch darszustellen nutze ich die Funktion `plot_model()`:

```{r}
library(sjPlot)
plot_model(mreg4,
           show.values=T)
```

Diese Darstellung lässt sich noch durch zahlreiche Optionen anpassen und verschönern. Das ist aber nicht mehr Teil dieser Videoserie.

Wenn wir mehrere Modelle vergleichen wollen, nutzen wir die Funktion `plot_models()` (das Plural-s macht den Unterschied).

```{r}
library(sjPlot)
plot_models(mreg3, mreg4,
           show.values=T)
```

`plot_models` hat aber auch Mehrebenenmodell-spezifische Optionen. Ich empfehle auf jeden Fall einen Blick in die Dokumentation:

https://strengejacke.github.io/sjPlot

Um einen Eindruck von den random Effects zu bekommen, also von den variierenden Intercepts und variierenden Slopes kann man der Funktion `plot_model()` mit dem argument `type="re"` sagen, dass die **r**andom **e**ffects dargestellt werden sollen.

```{r}
plot_model(mreg4, type="re")
```

Wenn ein Modell mehr als einen Random Effect aufweist, kann man mit `sort.est` angeben, nach welchem Effekt sortiert werden soll.

```{r}
plot_model(mreg4, type="re", sort.est = "bildung")
plot_model(mreg4, type="re", sort.est = "(Intercept)")
```

Schließlich kann der Cross-Level Interaktionseffekt dargestellt werden, indem man als `type="int"` spezifiziert.

```{r}
plot_model(mreg4, type="int")
```

Hier sieht man sehr anschaulich, was der Interaktionseffekt von $`r fixef(mreg4)[7]`$ bedeutet.

Wie auch im Forrest Plot oder in der Tabelle ausgegeben sehen wir auch hier, dass der Effekt von Bildung nicht signifikant ist - und zwar für Länder, die sehr sauber sind.

Der in der Tabelle berichtete Effekt für Bildung ist ja der Effekt, den wir für Länder schätzen, deren Wert für `korruption` bei $0$ liegt. Empirisch ist dieser Wert nicht vorhanden. Das sauberste Land hat einen Wert von $15$. Das sehen wir hier auch in der Grafik. Die rote Linie gibt den Effekt für Bildung wieder, den dieses am wenigsten Korrupte Land aufweist. Zwar ist die Linie leicht ansteigend, da aber das Konfindenzband so breit ist, dass Anfang und Ende der Linie auf der jeweils gegenüberliegenden Seite immernoch innerhalb des Konfindenzbandes liegen wissen wir, dass der Effekt nicht signifikant ist.

Anders bei Ländern mit den höchsten Wert auf dem Korruptionsindex. Hier sehen wir einen negativen Effekt. Je höher die Bildung, desto geringer ist das beobachtete Niveau an politischem Vertrauen.

Natürlich gibt es für die Zwischenschritte von Korruption auch die jeweiligen Slopes für Bildung. Das lässt sich aber grafisch dann nicht überischtlich darstellen.

Zwar sind die Konfindenzbänder für beide Linien relativ zur Effektgröße recht breit. Dennoch sehen wir schon bei wenig über dem Minimum liegenden Werten von Bildung, dass sich die Konfidenzbänder einseitig nicht überschneiden, also signifikante Unteschiede zwischen den unterschiedlich korruptionsbelasteten Ländern bestehen.

Inhaltlich ist das ein interessantes Ergebnis: Zunächst schien es, dass Bildung negativ auf politisches Vertrauen wirkt. Bei genauerem Hinsehen zeigt sich, dass der Effekt von Bildung varriert. In Ländern mit geringer Korruption hat Bildung keinen Einfluss. Mit zunehmender Korruption zeigt sich, dass Menschen mit höherer Bildung weniger Vertrauen. Für Menschen mit weniger Bildung, zeigt sich jedoch kein Unterschied.

# Schluss

Damit sind wir am Ende des letzten Teils der Videoreihe Mehrebenenregression in R.

Sie wissen nun, was eine Mehrebenenregression ist. Sie können beurteilen, wann eine Mehrebenenrgression notwendig ist, sie kennen die verschiedenen Varianten und können diese mit R rechnen und entscheiden, welches Modell das passende ist. Und Sie können die Ergebnisse tabellarisch und mit Grafiken aufbereiten.

Für die praktische Anwendung sind Sie bereits gut gerüstet. Trotzdem lassen sich zahlreiche Aspekte vertiefen. So können Sie sich zum Beispiel noch mit der Regressionsdiagnostik in Mehrebenenmodellen vertraut machen (z.B. mit dem Paket [`HLMdiag`](https://cran.rstudio.com/web/packages/HLMdiag/index.html) oder dem Paket [`DHARMa`](https://cran.r-project.org/web/packages/DHARMa/vignettes/DHARMa.html)). Oder Sie können Generalsierte Mehrebenenmodelle betrachten, die dann für nicht-metrische abhängige Variablen geeignet sind.

Wenn Sie die Mehrebenenregression von Grundauf verstehen möchsten, dann empfehle ich Ihnen das Buch Raudenbush & Bryk (2002): Hierarchical Linear Models Applications and Data Analysis Methods. Sage.

Am Ende des Videos gibt es wie immer noch eine kleine Aufgabe.

# Aufgabe

-   Stellen Sie zu Ihrer eigenen Fragestellung die Regressionsergebnisse der verschiedenen Modelle vergleichend als Tabelle dar.
-   Bereiten Sie die Quantites of Interest der Mehrebenenmodelle (Variierende Intercepts, variierende Slopes, Cross-Level Interaktionseffekte) grafisch auf.

# Lernzielabgleich

Haben Sie alles mitgenommen? Fragen Sie sich selbst, ob Sie die folgenden Lernziele erreicht haben:

-   die Regressionsergebnisse tabellarisch gegenüberzustellen.
-   die fixed Effects als Forrestplot grafisch darzustellen.
-   die variierenden Intercepts und variierende Slopes grafisch darzustellen.
-   Cross-Level Interaktionen mit Effekt-Plots grafisch darzustellen.

```{r, echo=F, eval=F}
library("knitr")
knitr::purl("Mreg6.Rmd",
            documentation=0)
```
